#!/usr/bin/env ruby
# timekeeper

# 20140929
# 0.2.0

require 'DatelessTime'

def timekeeper_filename
  ARGV[0]
end

def timekeeper_file
  File.read(timekeeper_filename)
end

def dates_and_times
  timekeeper_file.split("\n").reject{|line| line =~ /^#/}.select{|line| line =~ /;/}
end

def day(date_and_times)
  date_and_times.split(';').first
end

def day_periods(date_and_times)
  date_and_times.split(';').last
end

def days_hours_worked(date_and_times)
  days_hours_worked = 0
  day_periods(date_and_times).split(',').each do |day_period, index|
    beginning_of_period, end_of_period = day_period.strip.split('-')
    beginning_of_period = beginning_of_period.strip
    end_of_period = end_of_period.strip
    begin_time = DatelessTime.new(beginning_of_period).to_time
    end_time = DatelessTime.new(end_of_period).to_time
    days_hours_worked += (end_time - begin_time)/60/60
  end
  days_hours_worked
end

def total_hours_worked
  total_hours_worked = 0
  dates_and_times.each do |date_and_times|
    hours_worked = days_hours_worked(date_and_times)
    puts day(date_and_times) + ' ' + hours_worked.round(2).to_s + ' ' + '(' + hours_and_minutes(hours_worked) + ')'
    total_hours_worked += hours_worked
  end
  total_hours_worked
end

def hours_and_minutes(hours)
  minutes = hours * 60
  parts = minutes.divmod(60).collect{|e| e.to_i}
  [parts.first, "#{sprintf('%02d', parts.last)}"].join(':')
end

def main
  hours = total_hours_worked
  puts "#{hours} (#{hours_and_minutes(hours)})"
  exit

  p total_money_owed = total_hours_worked * 70

  file = File.read(ARGV[0])
  lines = file.split("\n")
  invoice_lines = lines.select{|line| line =~ /^_/}
  invoice_amounts = invoice_lines.collect do |invoice_line|
    invoice_line.split(',').last.strip.tr('$', '')
  end
  p total_money_invoiced = invoice_amounts.collect(&:to_i).inject(0){|total_amount, invoice_amount| total_amount + invoice_amount}

  p difference = total_money_owed - total_money_invoiced

  p hours_difference = difference/70
end

main
