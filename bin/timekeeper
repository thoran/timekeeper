#!/usr/bin/env ruby
# timekeeper

# 20200113
# 0.7.3

# Todo:
# 1. Be able to cope with cross-day start and stops for all those late night coders out there.
# 2. Create the supplied file if it doesn't exist.  The File.read() line in timekeeper() fails because timekeeper_filename is nil.  Done as of 0.7.3.

# Changes since 0.6:
# 1. The sub_command and the filename can come either first or second in the argument list on the command line now!
# 2. Some methods are memoized now, because this was so slow. :-P
# 0/1
# 3. Moved the config path from ~/.config/timekeeper.config to ~/.config/timekeeper/config.txt, which is more consistent with how I've arranged the ~/.config directory.
# 4. Included a sample config file in the repository.
# 1/2 ~ start()
# 5. Fixed an error which occurs when there are no entries in the specified timekeeper file.
# 6. Dried up the assignment of time_now, hours, and minutes.
# 2/3
# 7. ~ timekeeper(), so that it will create a file in the default path if there is none.  See Todo #2.

require 'DatelessTime'
require 'fileutils'
require 'time'

SUB_COMMANDS = %w{start stop report open}

def config_path
  File.expand_path(File.join('~', '.config', 'timekeeper', 'config.txt'))
end

def timekeeper_dir
  File.read(config_path).strip
end

def sub_command_first?
  @sub_command_first ||= SUB_COMMANDS.include?(ARGV[0])
end

def sub_command
  if sub_command_first?
    ARGV[0]
  else
    ARGV[1]
  end
end

def timekeeper_input
  @timekeeper_input ||= (
    if sub_command_first?
      ARGV[1]
    else
      ARGV[0]
    end
  )
end

def timekeeper_filename
  @timekeeper_filename ||= (
    if File.exist?(File.expand_path(timekeeper_input))
      File.expand_path(timekeeper_input)
    elsif File.exist?(File.expand_path(File.join("#{timekeeper_dir}", timekeeper_input)))
      File.expand_path(File.join("#{timekeeper_dir}", timekeeper_input))
    elsif File.exist?(File.expand_path(File.join("#{timekeeper_dir}", "#{timekeeper_input}.timekeeper")))
      File.expand_path(File.join("#{timekeeper_dir}", "#{timekeeper_input}.timekeeper"))
    end
  )
end

def timekeeper
  unless timekeeper_filename && File.exist?(timekeeper_filename)
    new_timekeeper_filename = File.expand_path(File.join("#{timekeeper_dir}", "#{timekeeper_input}.timekeeper"))
    FileUtils.touch(new_timekeeper_filename)
  end
  File.read(timekeeper_filename)
end

# in common with timekeeper2timesheet

def day_and_date(date_and_times)
  date_and_times.split(';').first
end

def day_and_date?(date_and_times)
  day_and_date(date_and_times).split(',').size == 2
end

def day_name(date)
  case Time.parse(date).wday
  when 1; 'Monday'
  when 2; 'Tuesday'
  when 3; 'Wednesday'
  when 4; 'Thursday'
  when 5; 'Friday'
  when 6; 'Saturday'
  when 7; 'Sunday'
  end
end

def day(date_and_times)
  if day_and_date?(date_and_times)
    day_and_date(date_and_times).split(',').first.strip
  else
    date = date(date_and_times)
    day_name(date)
  end
end

def date(date_and_times)
  if day_and_date?(date_and_times)
    day_and_date(date_and_times).split(',').last.strip
  else
    day_and_date(date_and_times).split(',').first.strip
  end
end

def day_periods(date_and_times)
  date_and_times.split(';').last
end

def beginning_of_period(day_period)
  day_period.strip.split('-').first.strip
end

def end_of_period(day_period)
  day_period.strip.split('-').last.strip
end

def lines(timekeeper)
  timekeeper.split("\n")
end

def date_and_time_line?(line)
  !!(line =~ /^#/ || line =~ /;/)
end

def dates_and_times(timekeeper)
  lines(timekeeper).reject{|line| line =~ /^#/}.select{|line| line =~ /;/}
end

# in common with timekeeper2timesheet

def days_hours_worked(date_and_times)
  days_hours_worked = 0
  day_periods(date_and_times).split(',').each do |day_period, index|
    beginning_of_period, end_of_period = day_period.strip.split('-')
    beginning_of_period = beginning_of_period.strip
    end_of_period = end_of_period.strip
    begin_time = DatelessTime.new(beginning_of_period).to_time
    end_time = DatelessTime.new(end_of_period).to_time
    days_hours_worked += (end_time - begin_time)/60/60
  end
  days_hours_worked
end

def total_hours_worked(timekeeper)
  total_hours_worked = 0
  dates_and_times(timekeeper).each do |date_and_times|
    hours_worked = days_hours_worked(date_and_times)
    puts day(date_and_times) + ', ' + date(date_and_times) + ': ' + hours_worked.round(2).to_s + ' ' + '(' + hours_and_minutes(hours_worked) + ')'
    total_hours_worked += hours_worked
  end
  total_hours_worked
end

def hours_and_minutes(hours)
  minutes = hours * 60
  parts = minutes.divmod(60).collect{|e| e.to_i}
  [parts.first, "#{sprintf('%02d', parts.last)}"].join(':')
end

def todays_entry(timekeeper)
  lines(timekeeper).index do |line|
    next unless date_and_time_line?(line)
    date(line) == Date.today.to_s
  end
end

def total_days
 dates_and_times(timekeeper).count
end

def start
  time_now = Time.now
  hours, minutes = time_now.hour, sprintf('%02d', time_now.min)
  if lines(timekeeper).empty? # There are no entries in the file yet.
    timekeeper_array = ["#{Date.today}; #{hours}:#{minutes} - "]
  elsif index = todays_entry(timekeeper) # There are entries in the file and there is an entry for today already.
    timekeeper_array = lines(timekeeper)
    if timekeeper_array[index] =~ /;/
      timekeeper_array[index] << ", #{hours}:#{minutes} - "
    else
      timekeeper_array[index] << "; #{hours}:#{minutes} - "
    end
  else # There are entries in the file, but there is no entry for today as yet.
    timekeeper_array = (
      if day_and_date?(lines(timekeeper).last)
        lines(timekeeper) << "#{day_name(Date.today.to_s)}, #{hours}:#{minutes}; #{Time.now} - "
      else
        lines(timekeeper) << "#{Date.today}; #{hours}:#{minutes} - "
      end
    )
  end
  timekeeper = timekeeper_array.join("\n")
  File.write(timekeeper_filename, timekeeper)
end

def stop
  if index = todays_entry(timekeeper)
    time_now = Time.now
    hours, minutes = time_now.hour, sprintf('%02d', time_now.min)
    timekeeper_array = lines(timekeeper)
    timekeeper_array[index] = timekeeper_array[index] + "#{hours}:#{minutes}"
  else
    puts 'No entry for today found.'
  end
  timekeeper = timekeeper_array.join("\n")
  File.write(timekeeper_filename, timekeeper)
end

def report
  hours = total_hours_worked(timekeeper)
  mean_hours = (hours/total_days)
  puts
  puts "Total hours: #{hours.round(2)} (#{hours_and_minutes(hours)})"
  puts "Mean hours per day: #{mean_hours.round(2)} (#{hours_and_minutes(mean_hours)})"
end

def open
  exec "#{ENV['VISUAL']} #{timekeeper_filename}"
end

def main
  send(sub_command) if SUB_COMMANDS.include?(sub_command)
end

main
