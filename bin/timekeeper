#!/usr/bin/env ruby
# timekeeper

# 20160612
# 0.4.0

# Todo:
# 1. Be able to cope with cross-day start and stops for all those late night coders out there.

require 'DatelessTime'
require 'time'

def config_path
  File.expand_path(File.join('~', '.config', 'timekeeper.config'))
end

def timekeeper_dir
  File.read(config_path).strip
end

def sub_command
  ARGV[0]
end

def timekeeper_filename
  if File.exist?(File.expand_path(ARGV[1]))
    File.expand_path(ARGV[1])
  elsif File.exist?(File.expand_path(File.join("#{timekeeper_dir}", ARGV[1])))
    File.expand_path(File.join("#{timekeeper_dir}", ARGV[1]))
  elsif File.exist?(File.expand_path(File.join("#{timekeeper_dir}", "#{ARGV[1]}.timekeeper")))
    File.expand_path(File.join("#{timekeeper_dir}", "#{ARGV[1]}.timekeeper"))
  end
end

def timekeeper
  File.read(timekeeper_filename)
end

# in common with timekeeper2timesheet

def day_and_date(date_and_times)
  date_and_times.split(';').first
end

def day_and_date?(date_and_times)
  day_and_date(date_and_times).split(',').size == 2
end

def day_name(date)
  case Time.parse(date).wday
  when 1; 'Monday'
  when 2; 'Tuesday'
  when 3; 'Wednesday'
  when 4; 'Thursday'
  when 5; 'Friday'
  when 6; 'Saturday'
  when 7; 'Sunday'
  end
end

def day(date_and_times)
  if day_and_date?(date_and_times)
    day_and_date(date_and_times).split(',').first.strip
  else
    date = date(date_and_times)
    day_name(date)
  end
end

def date(date_and_times)
  if day_and_date?(date_and_times)
    day_and_date(date_and_times).split(',').last.strip
  else
    day_and_date(date_and_times).split(',').first.strip
  end
end

def day_periods(date_and_times)
  date_and_times.split(';').last
end

def beginning_of_period(day_period)
  day_period.strip.split('-').first.strip
end

def end_of_period(day_period)
  day_period.strip.split('-').last.strip
end

def lines(timekeeper)
  timekeeper.split("\n")
end

def date_and_time_line?(line)
  !!(line =~ /^#/ || line =~ /;/)
end

def dates_and_times(timekeeper)
  lines(timekeeper).reject{|line| line =~ /^#/}.select{|line| line =~ /;/}
end

# in common with timekeeper2timesheet

def days_hours_worked(date_and_times)
  days_hours_worked = 0
  day_periods(date_and_times).split(',').each do |day_period, index|
    beginning_of_period, end_of_period = day_period.strip.split('-')
    beginning_of_period = beginning_of_period.strip
    end_of_period = end_of_period.strip
    begin_time = DatelessTime.new(beginning_of_period).to_time
    end_time = DatelessTime.new(end_of_period).to_time
    days_hours_worked += (end_time - begin_time)/60/60
  end
  days_hours_worked
end

def total_hours_worked(timekeeper)
  total_hours_worked = 0
  dates_and_times(timekeeper).each do |date_and_times|
    hours_worked = days_hours_worked(date_and_times)
    puts day(date_and_times) + ', ' + date(date_and_times) + ': ' + hours_worked.round(2).to_s + ' ' + '(' + hours_and_minutes(hours_worked) + ')'
    total_hours_worked += hours_worked
  end
  total_hours_worked
end

def hours_and_minutes(hours)
  minutes = hours * 60
  parts = minutes.divmod(60).collect{|e| e.to_i}
  [parts.first, "#{sprintf('%02d', parts.last)}"].join(':')
end

def todays_entry(timekeeper)
  lines(timekeeper).index do |line|
    next unless date_and_time_line?(line)
    date(line) == Date.today.to_s
  end
end

def start
  if index = todays_entry(timekeeper)
    timekeeper_array = lines(timekeeper)
    time_now = Time.now
    hours, minutes = time_now.hour, sprintf('%02d', time_now.min)
    if timekeeper_array[index] =~ /;/
      timekeeper_array[index] << ", #{hours}:#{minutes} - "
    else
      timekeeper_array[index] << "; #{hours}:#{minutes} - "
    end
  else
    time_now = Time.now
    hours, minutes = time_now.hour, sprintf('%02d', time_now.min)
    timekeeper_array = (
      if day_and_date?(lines(timekeeper).last)
        lines(timekeeper) << "#{day_name(Date.today.to_s)}, #{hours}:#{minutes}; #{Time.now} - "
      else
        lines(timekeeper) << "#{Date.today}; #{hours}:#{minutes} - "
      end
    )
  end
  timekeeper = timekeeper_array.join("\n")
  File.write(timekeeper_filename, timekeeper)
end

def stop
  if index = todays_entry(timekeeper)
    time_now = Time.now
    hours, minutes = time_now.hour, sprintf('%02d', time_now.min)
    timekeeper_array = lines(timekeeper)
    timekeeper_array[index] = timekeeper_array[index] + "#{hours}:#{minutes}"
  else
    puts 'No entry for today found.'
  end
  timekeeper = timekeeper_array.join("\n")
  File.write(timekeeper_filename, timekeeper)
end

def report
  hours = total_hours_worked(timekeeper)
  puts "#{hours} (#{hours_and_minutes(hours)})"
end

def main
  send(sub_command)
end

main
